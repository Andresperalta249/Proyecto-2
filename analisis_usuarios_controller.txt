ANÁLISIS DE RELACIÓN ENTRE CONTROLLER BASE Y USUARIOS CONTROLLER
=============================================================

1. ATRIBUTOS DEL CONTROLADOR BASE (Controller)
--------------------------------------------
protected $db;      // Instancia de la base de datos
protected $view;    // Instancia de la vista

2. MÉTODOS DEL CONTROLADOR BASE
------------------------------
public function __construct()
    - Inicializa la configuración
    - Carga la base de datos
    - Inicializa la vista

protected function loadModel($model)
    - Carga modelos desde la carpeta models/
    - Verifica la existencia del archivo
    - Retorna una instancia del modelo

protected function render($view, $data = [])
    - Renderiza vistas desde la carpeta views/
    - Extrae los datos para la vista
    - Retorna el contenido renderizado

protected function redirect($url)
    - Redirecciona a una URL específica
    - Usa la constante BASE_URL

3. ATRIBUTOS DEL CONTROLADOR DE USUARIOS (UsuariosController)
----------------------------------------------------------
private $userModel;         // Modelo de usuarios
private $rolModel;          // Modelo de roles
private $permisoModel;      // Modelo de permisos
private $logModel;          // Modelo de logs

4. MÉTODOS DEL CONTROLADOR DE USUARIOS
------------------------------------
Métodos Principales:
------------------
public function indexAction()
    - Lista todos los usuarios
    - Filtra por roles y permisos
    - Renderiza la vista principal

public function createAction()
    - Crea nuevo usuario
    - Valida datos de entrada
    - Asigna roles y permisos
    - Envía correo de bienvenida

public function editAction($id)
    - Edita usuario existente
    - Actualiza roles y permisos
    - Valida cambios de estado

public function deleteAction($id)
    - Elimina usuario
    - Verifica dependencias
    - Registra en logs

Métodos de Autenticación:
-----------------------
public function loginAction()
    - Procesa inicio de sesión
    - Valida credenciales
    - Inicia sesión

public function logoutAction()
    - Cierra sesión
    - Limpia datos de sesión

Métodos de Gestión de Roles:
--------------------------
public function asignarRolAction()
    - Asigna roles a usuarios
    - Valida permisos

public function quitarRolAction()
    - Quita roles de usuarios
    - Actualiza permisos

Métodos de API:
-------------
public function getUsuariosAction()
    - Devuelve lista de usuarios
    - Filtra por parámetros

public function verificarEmailAction()
    - Verifica disponibilidad de email
    - Usado en registro

Métodos de Utilidad:
------------------
protected function validateUserData()
    - Valida datos de usuario
    - Verifica formato email
    - Valida contraseña

protected function sendWelcomeEmail()
    - Envía correo de bienvenida
    - Genera contraseña temporal

5. RELACIÓN DE HERENCIA
----------------------
- UsuariosController extiende de Controller
- Hereda atributos base ($db, $view)
- Hereda métodos base (loadModel, render, redirect)
- Usa parent::__construct() para inicialización

6. USO DE MÉTODOS HEREDADOS
--------------------------
Ejemplos de uso en UsuariosController:

// Cargar modelos
$this->userModel = $this->loadModel('User');
$this->rolModel = $this->loadModel('Rol');

// Renderizar vistas
$content = $this->render('usuarios/index', [
    'usuarios' => $usuarios,
    'roles' => $roles
]);

// Redirecciones
$this->redirect('auth/login');

7. FLUJO DE TRABAJO
------------------
1. El controlador base proporciona:
   - Conexión a base de datos
   - Sistema de vistas
   - Carga de modelos
   - Redirecciones

2. UsuariosController agrega:
   - Lógica de negocio específica
   - Gestión de usuarios
   - Autenticación
   - Control de acceso

3. Interacción:
   - Usa métodos base para operaciones comunes
   - Extiende funcionalidad para usuarios
   - Mantiene separación de responsabilidades

8. CONSIDERACIONES DE SEGURIDAD
-----------------------------
- Validación de datos en cada acción
- Control de acceso basado en roles
- Registro de actividades en logs
- Sanitización de entradas
- Protección contra CSRF
- Manejo seguro de contraseñas

9. MEJORES PRÁCTICAS IMPLEMENTADAS
--------------------------------
- Separación de responsabilidades
- Reutilización de código base
- Manejo de errores consistente
- Logging de actividades
- Validación de datos
- Control de acceso granular 